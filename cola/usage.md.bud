You must **statically** link the mulle-atinit library with your executable.
Ensure that global symbols are exported and that the whole library is linked
to the executable and not optimized away by the linker.

| Platform | Linker Flags
|----------|--------------------------------------------------
| Linux    | `-Wl,--export-dynamic -Wl,--whole-archive`
| macos    | `-force_load <library>`

Any participating shared library constructor uses

``` c
mulle_atinit( f, userinfo, priority);
```

to defer `f` to a later date.

![mulle-atinit](mulle-atinit.svg)

The function `f` will be called properly sequenced before main. `userinfo` will
be passed as the only parameter. You use priority 0 normally. Use higher
priorities to move initializers ahead.

### Missing `dlsym`

If you are linking your executable statically and `dlsym` is not available
(musl) then you must define `__MULLE_STATICALLY_LINKED__`, when building all
dependencies that use `mulle_atinit`. Dynamic linking with a missing `dlsym`
won't work.


